#!/usr/bin/env python
import os
import sys
import subprocess
from functools import partial

# *** Setting.

VERSION = "0.6.1"
COMPATIBILITY_MINIMUM = "4.4"

BIN_DIR = "project/addons/sentry/bin"


def run_cmd(**kwargs):
    """Run command in a subprocess and return its exit code."""
    result = subprocess.run(
        kwargs["args"],
        check=True,
    )
    return result.returncode


# *** Generate version header.

print("Generating SDK version header...")

git_sha = "unknown"
try:
    cmd = ["git", "rev-parse", "--short", "HEAD"]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    git_sha = proc.communicate()[0].strip().decode("utf-8")
except:
    pass

version_header_content = """/* DO NOT EDIT - generated by SConstruct */
#ifndef SENTRY_GODOT_SDK_VERSION_GEN_H
#define SENTRY_GODOT_SDK_VERSION_GEN_H

#define SENTRY_GODOT_SDK_VERSION \"{version}+{git_sha}\"

#endif // SENTRY_GODOT_SDK_VERSION_GEN_H
""".format(version=VERSION, git_sha=git_sha)

if not os.path.exists("src/gen/"):
    os.mkdir("src/gen/")
with open("src/gen/sdk_version.gen.h", "w") as f:
    f.write(version_header_content)


# *** Build godot-cpp.

print("Reading godot-cpp build configuration...")
env = SConscript("modules/godot-cpp/SConstruct")

platform = env["platform"] 

# *** Build sentry-native.

# Include sentry-native libs (static).
if platform in ["linux", "macos", "windows"]:
    # Build sentry-native.
    env = SConscript("modules/SConstruct", exports=["env"])

    # Copy crashpad handler to project directory.
    sn_actions = []
    sn_targets = []
    sn_sources = []

    def copy_file_action(target_file, source_file):
        sn_actions.append(Copy(target_file, source_file))
        sn_targets.append(target_file)
        sn_sources.append(source_file)

    target_dir = BIN_DIR + "/" + env["platform"]
    source_dir = "modules/sentry-native/install/bin"

    if platform == "windows":
        copy_file_action(
            File(f"{target_dir}/crashpad_handler.exe"),
            File(f"{source_dir}/crashpad_handler.exe")
        )
        copy_file_action(
            File(f"{target_dir}/crashpad_handler.pdb"),
            File(f"{source_dir}/crashpad_handler.pdb")
        )
    else:
        copy_file_action(
            File(f"{target_dir}/crashpad_handler"),
            File(f"{source_dir}/crashpad_handler")
        )

    deploy_crashpad_handler = env.Command(sn_targets, sn_sources, sn_actions)
    Default(deploy_crashpad_handler)


# *** Build GDExtension library.

# Include relative to project source root.
env.Append(CPPPATH=["src/"])

# Source files to compile.
sources = Glob("src/*.cpp")
sources += Glob("src/editor/*.cpp")
sources += Glob("src/sentry/*.cpp")
sources += Glob("src/sentry/util/*.cpp")
# Compile sentry-native code only on respective platforms.
if env["platform"] in ["linux", "windows", "macos"]:
    sources += Glob("src/sentry/native/*.cpp")
elif env["platform"] == "android":
    sources += Glob("src/sentry/android/*.cpp")

# Generate documentation data.
if env["target"] in ["editor", "template_debug"]:
    try:
        doc_data = env.GodotCPPDocData(
            "src/gen/doc_data.gen.cpp", source=Glob("doc_classes/*.xml"))
        sources.append(doc_data)
    except AttributeError:
        print("Not including class reference as we're targeting a pre-4.3 baseline.")

build_type = "release" if env["target"] == "template_release" else "debug"

if env["platform"] == "macos":
    library = env.SharedLibrary(
        "{bin}/{platform}/libsentry.{platform}.{build_type}.framework/libsentry.{platform}.{build_type}".format(
            bin=BIN_DIR,
            platform=env["platform"],
            build_type=build_type,
        ),
        source=sources,
    )
else:
    library = env.SharedLibrary(
        "{bin}/{platform}/libsentry.{platform}.{build_type}.{arch}{shlib_suffix}".format(
            bin=BIN_DIR,
            platform=env["platform"],
            build_type=build_type,
            arch=env["arch"],
            shlib_suffix=env["SHLIBSUFFIX"],
        ),
        source=sources,
    )

Default(library)


# *** Deploy extension manifest.

manifest = env.Substfile(
    target="{bin}/sentry.gdextension".format(
        bin=BIN_DIR,
    ),
    source="src/manifest.gdextension",
    SUBST_DICT={
        "{compatibility_minimum}": COMPATIBILITY_MINIMUM
    },
)

Default(manifest)


# *** Create symbolic link from project addons dir to gdUnit4 testing framework submodule.

def symlink(target, source, env):
    # Note: parameter `target` is a list of build targets.
    assert len(target) == 1
    assert len(source) == 1
    dst = str(target[0])
    src = str(source[0])
    if env["platform"] == "windows":
        # Create NTFS junction.
        # Note: Windows requires elevated privileges to create symlinks, so we're creating NTFS junction instead.
        try:
            import _winapi
            _winapi.CreateJunction(src, dst)
        except Exception as e:
            # Don't fail the build if this step fails.
            print("WARNING: Failed to create NTFS junction for gdUnit4: ", str(e))
    else:
        # Create symlink.
        src = os.path.relpath(src, os.path.dirname(dst))
        os.symlink(src, dst)
    return 0


gdunit_symlink = env.Command(
    "project/addons/gdUnit4",
    "modules/gdUnit4/addons/gdUnit4",
    [
        symlink,
    ],
)

Default(gdunit_symlink)

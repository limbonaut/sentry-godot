#!/usr/bin/env python
## Purpose: Build sentry-native static library.

import os

try:
    Import("env")
    env = env.Clone()
except:
    env = Environment(ENV = os.environ)

# Get platform and architecture from environment or command line arguments
platform = env.get("platform", ARGUMENTS.get("platform", ""))
arch = env.get("arch", ARGUMENTS.get("arch", ""))

if not platform:
    print("ERROR: Platform not specified. Use platform=<platform> argument.")
    Exit(1)

if not arch:
    print("ERROR: Architecture not specified. Use arch=<arch> argument.")
    Exit(1)

if platform not in ["windows", "linux", "macos"]:
    Return()

if env.get("use_mingw") == True:
    print("ERROR: Compiling with MinGW is not supported yet.")
    Exit(1)

if env.get("use_llvm") == True:
    print("ERROR: Compiling with LLVM is not supported yet.")
    Exit(1)

cmake_gen = "cmake -B build"
cmake_gen += " -DSENTRY_BUILD_SHARED_LIBS=OFF"
cmake_gen += " -DSENTRY_BACKEND=crashpad"
cmake_gen += " -DSENTRY_SDK_NAME=\"sentry.native.godot\""
cmake_gen += " -DCMAKE_BUILD_TYPE=RelWithDebInfo"

build_targets = []

# Define our build targets for the command
if platform == "windows":
    build_targets.append(File("sentry-native/install/lib/sentry.lib"))
    build_targets.append(File("sentry-native/install/bin/crashpad_handler.exe"))
else:
    build_targets.append(File("sentry-native/install/lib/libsentry.a"))
    build_targets.append(File("sentry-native/install/bin/crashpad_handler"))

# Platform-specific options
if platform == "windows":
    if arch == "x86_32":
        cmake_arch = "-A Win32"
    elif arch == "x86_64":
        cmake_arch = "-A x64"
    else:
        print(f"ERROR: Unsupported architecture '{arch}' for platform '{platform}'")
        Exit(1)
    cmake_gen += f' -G "Visual Studio 17 2022" {cmake_arch}'
elif platform == "linux":
    if arch == "x86_32":
        cmake_gen += ' -DCMAKE_C_FLAGS="-m32" -DCMAKE_CXX_FLAGS="-m32" -DLINK_OPTIONS="-m32"'
    elif arch == "x86_64":
        cmake_gen += ' -DCMAKE_C_FLAGS="-m64" -DCMAKE_CXX_FLAGS="-m64" -DLINK_OPTIONS="-m64"'
    else:
        print(f"ERROR: Unsupported architecture '{arch}' for platform '{platform}'")
        Exit(1)
elif platform == "macos":
    cmake_arch = "arm64;x86_64" if arch == "universal" else arch
    cmake_gen += f' -DCMAKE_OSX_ARCHITECTURES="{cmake_arch}"'
    macos_deployment_target = env.get("macos_deployment_target", "default")
    if macos_deployment_target != "default":
        cmake_gen += f' -DCMAKE_OSX_DEPLOYMENT_TARGET=\"{macos_deployment_target}\"'

cmake_sentry = "cmake --build build --target sentry --parallel --config RelWithDebInfo"
cmake_crashpad = "cmake --build build --target crashpad_handler --parallel --config RelWithDebInfo"
cmake_install = "cmake --install build --prefix install --config RelWithDebInfo"

sentry_native_dir = Dir('sentry-native').abspath

sentry_native = env.Command(
    target=build_targets,
    source=[Dir("sentry-native/src")],
    action=[
        f"cd {sentry_native_dir} && {cmake_gen}",
        f"cd {sentry_native_dir} && {cmake_sentry}",
        f"cd {sentry_native_dir} && {cmake_crashpad}",
        f"cd {sentry_native_dir} && {cmake_install}",
    ]
)

# Force sentry-native to be built sequential to godot-cpp (not in parallel)
Depends(sentry_native, "godot-cpp")
Default(sentry_native)

Clean(sentry_native, [Dir("sentry-native/build"), Dir("sentry-native/install")])
